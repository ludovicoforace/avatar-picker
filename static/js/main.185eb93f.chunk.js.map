{"version":3,"sources":["components/ErrorBoundary.tsx","style/ResetCSS.tsx","style/GlobalStyle.tsx","components/ThemeProvider.tsx","api/index.ts","style/AvatarBorder.tsx","style/AvatarOverlay.tsx","style/AvatarImage.tsx","components/AvatarItem.tsx","style/ArrowUp.tsx","style/Popover.tsx","style/PopoverTitle.tsx","components/AvatarPopover.tsx","utils/hooks.ts","components/AvatarPicker.tsx","style/themes.ts","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["ErrorBoundary","state","error","this","children","props","Component","ResetCSS","createGlobalStyle","GlobalStyle","theme","textColor","fontFamily","ThemeProvider","getAvatar","avatar","Promise","resolve","setTimeout","styled","div","listItem","picking","selected","loadingAvatar","border","overlayColor","img","Wrapper","AvatarBorder","initialColor","AvatarImage","AvatarOverlay","AvatarItem","source","label","onClick","alt","src","popover","bg","shadow","h2","AvatarPopover","ref","cb","onOutsidePopoverClick","popoverRef","useRef","useEffect","event","current","contains","target","document","addEventListener","removeEventListener","ArrowUp","Popover","PopoverTitle","AvatarPicker","avatars","useState","setPicking","setLoadingAvatar","currentAvatar","setCurrentAvatar","onPickedAvatarClick","a","av","map","key","id","bind","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.185eb93f.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\ninterface PropTypes {\n  children: {} | []\n}\n\nexport const errorMessage = 'Something went wrong!'\nclass ErrorBoundary extends Component<PropTypes> {\n  state = { error: false }\n\n  static getDerivedStateFromError() {\n    return { error: true }\n  }\n\n  render() {\n    const { error } = this.state\n    const { children } = this.props\n\n    if(error) {\n      return <h1>{errorMessage}</h1>\n    }\n\n    return children\n  }\n}\n\nexport default ErrorBoundary\n","import { createGlobalStyle } from 'styled-components'\n\nconst ResetCSS = createGlobalStyle`\nbody {\n  margin: 0;\n  line-height: 0;\n}\nhtml {\n  -webkit-text-size-adjust: 100%;\n  -moz-text-size-adjust: 100%;\n  -ms-text-size-adjust: 100%;\n}\n* {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n*::before,\n*::after {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n@-ms-viewport {\n  width: device-width;\n}\n*:focus {\n  outline: none;\n}\n`\n\nexport default ResetCSS\n","import { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle<{theme: { textColor: string, fontFamily: string }}>`\nbody {\n  color: ${props => props.theme.textColor};\n  font-family: ${props => props.theme.fontFamily};\n}\n`\n\nexport default GlobalStyle\n","import React from 'react'\nimport { ThemeProvider as SThemeProvider } from 'styled-components'\nimport ResetCSS from '../style/ResetCSS'\nimport GlobalStyle from '../style/GlobalStyle'\n\ninterface PropTypes {\n  theme: {}\n  children: {} | []\n}\n\nconst ThemeProvider = ({ theme, children }: PropTypes) => (\n  <SThemeProvider theme={theme}>\n    <ResetCSS />\n    <GlobalStyle />\n    {children}\n  </SThemeProvider>\n)\n\nexport default ThemeProvider\n","import { Avatar } from '../interfaces'\n\nexport function getAvatar(avatar: Avatar) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(avatar)\n    }, 1000)\n  })\n}\n","import styled from 'styled-components'\n\ninterface PropTypes {\n  listItem?: boolean \n  picking?: boolean\n  selected?: boolean\n  loadingAvatar?: boolean\n}\n\nexport default styled.div<PropTypes>`\nposition: absolute;\nz-index: 4;\nwidth: 100%;\nheight: 100%;\nborder-style: solid;\nborder-width: ${props => props.listItem\n  ? '3px'\n  : '1px'\n};\n${props => (\n  (!props.listItem && props.picking) ||\n  props.selected ||\n  props.loadingAvatar)\n    ? `border-color: ${props.theme.border.overlayColor}`\n    : 'border-color: transparent'\n};\n${props => props.loadingAvatar && (`\n  border-style: solid solid;\n  border-right-color: transparent;\n  animation: Rotate 1.5s;\n  animation-iteration-count: infinite;\n`)}\nborder-radius: 50%;\n\n@keyframes Rotate {\n from { transform: rotate(0deg); }\n to { transform: rotate(360deg); }\n}`\n","import styled from 'styled-components'\n\nexport default styled.div`\nposition: absolute;\nz-index: 2;\nwidth: 100%;\nheight: 100%;\nbackground-color: rgb(122, 161, 178, 0.2);\nborder-radius: 50%;\n`\n","import styled from 'styled-components'\n\ninterface PropTypes {\n  src: string, \n  alt: string\n}\n\nexport default styled.img<PropTypes>`\nposition: absolute;\nleft: 0;\nright: 0;\nz-index: 3;\nwidth: 100%;\nheight: 100%;\nborder-radius: 50%;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport AvatarBorder from '../style/AvatarBorder'\nimport AvatarOverlay from '../style/AvatarOverlay'\nimport AvatarImage from '../style/AvatarImage'\n\ninterface WrapperPropTypes {\n  loadingAvatar?: boolean\n  selected?: boolean\n  listItem?: boolean\n  onClick: () => void\n}\n\nconst Wrapper = styled.div<WrapperPropTypes>`\nposition: relative;\nz-index: 1;\ndisplay: inline-block;\nwidth: 60px;\nheight: 60px;\nmargin: 4px;\n\n${props => !props.loadingAvatar && (`\n  &:hover {\n    ${AvatarBorder} {\n      cursor: pointer;\n      ${!props.selected && `border-color: ${props.theme.border.initialColor}`};\n    }\n    ${(!props.selected && props.listItem) && (`\n      ${AvatarImage} {\n        z-index: 2;\n      }\n      ${AvatarOverlay} {\n        z-index: 3;\n      }\n    `)}\n  }`\n)}`\n\ninterface PropTypes {\n  selected?: boolean\n  loadingAvatar?: boolean\n  listItem?: boolean\n  picking?: boolean\n  source: string\n  label: string\n  onClick: () => void\n}\n\nconst AvatarItem = ({\n  selected,\n  loadingAvatar,\n  listItem,\n  picking,\n  source,\n  label,\n  onClick\n}: PropTypes) => (\n  <Wrapper\n    onClick={onClick}\n    selected={selected}\n    loadingAvatar={loadingAvatar}\n    listItem={listItem}\n  >\n    <AvatarBorder\n      selected={selected}\n      loadingAvatar={loadingAvatar}\n      listItem={listItem}\n      picking={picking}\n    />\n    <AvatarOverlay />\n    <AvatarImage alt={label} src={source} />\n  </Wrapper>\n)\n\nexport default AvatarItem\n","import styled from 'styled-components'\n\nexport default styled.div`\ndisplay: inline-block;\nwidth: 0; \nheight: 0; \nborder-left: 10px solid transparent;\nborder-right: 10px solid transparent;\nborder-bottom: 10px solid ${props => props.theme.popover.bg};\n`\n","import styled from 'styled-components'\n\nexport default styled.div`\nbackground-color: ${props => props.theme.popover.bg};\nwidth: 280px;\nmargin: 0 auto;\npadding: 0 4px 8px;\ntext-align: left;\nborder-radius: 2px;\nbox-shadow: ${props => props.theme.popover.shadow};\n`\n","import styled from 'styled-components'\n\nexport default styled.h2`\nfont-size: 16px;\npadding: 14px 0;\nmargin: 0;\nline-height: normal;\ntext-align: center;\n`\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport ArrowUp from '../style/ArrowUp'\nimport Popover from '../style/Popover'\nimport PopoverTitle from '../style/PopoverTitle'\nimport { useClickOutsideElement } from '../utils/hooks'\n\nconst Wrapper = styled.div<{picking: boolean}>`\nanimation: ${props => props.picking\n    ? 'Fadein 0.3s'\n    : 'Fadeout 0.1s'\n};\nvisibility: ${props => props.picking \n  ? 'visible' \n  : 'hidden'\n};\ntransition: visibility 0.1s linear;\ntext-align: center;\n\n@keyframes Fadein { \n  0% { transform: scale(0); }\n  50% { transform: scale(1.1); }\n  100% { transform: scale(1); }\n}\n\n@keyframes Fadeout { \n  0% { transform: scale(1); }\n  100% { transform: scale(0); }\n}\n`\n\ninterface PropTypes {\n  picking: boolean\n  children?: {} | []\n  onOutsidePopoverClick: () => void\n}\n\nconst AvatarPopover = ({\n  picking,\n  children,\n  onOutsidePopoverClick\n}: PropTypes) => {\n  const popoverRef = useRef(null)\n  useClickOutsideElement(popoverRef, onOutsidePopoverClick)\n\n  return (\n    <Wrapper picking={picking}>\n      <ArrowUp />\n      <Popover ref={popoverRef}>\n        <PopoverTitle>Choose your avatar</PopoverTitle>\n        {children}\n      </Popover>\n    </Wrapper>\n  )\n}\n\nexport default AvatarPopover\n","import { useEffect } from 'react'\n\nexport function useClickOutsideElement(ref: any, cb: () => void) {\n  useEffect(() => {\n    // run callback if clicked \n    // on outside of target element\n    function onClick(event: any) {\n      if (ref.current && !ref.current.contains(event.target)) {\n        cb()\n      }\n    }\n    \n    // Bind the event listener\n    document.addEventListener<any>(\n      'mousedown', \n      onClick\n    )\n\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener<any>(\n        'mousedown', \n        onClick\n      )\n    }\n  }, [ref, cb])\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { getAvatar } from '../api'\nimport { Avatar } from '../interfaces'\nimport AvatarItem from './AvatarItem'\nimport AvatarPopover from './AvatarPopover'\n\ninterface PropTypes {\n  avatars: Avatar[]\n}\n\nconst Wrapper = styled.div`\nmax-width: 320px;\nmargin: 0 auto;\ntext-align: center;\n`\n\nconst AvatarPicker = ({ avatars }: PropTypes) => {\n  const [picking, setPicking] = useState(false)\n  const [loadingAvatar, setLoadingAvatar] = useState<null | {}>(null)\n  const [currentAvatar, setCurrentAvatar] = useState(avatars[0])\n\n  const onCurrentAvatarClick = () => {\n    setPicking(picking => !picking)\n  }\n  const onOutsidePopoverClick = () => {\n    setPicking(false)\n  }\n  const onPickedAvatarClick = async (avatar: Avatar) => {\n    setLoadingAvatar(avatar)\n    const av: any = await getAvatar(avatar)\n    setCurrentAvatar(av)\n    setLoadingAvatar(null)\n    setPicking(false)\n  }\n\n  return (\n    <Wrapper>\n      <AvatarItem \n        onClick={onCurrentAvatarClick}\n        source={currentAvatar.src}\n        label={currentAvatar.label}\n        picking={picking}\n      />\n      <AvatarPopover \n        picking={picking}\n        onOutsidePopoverClick={onOutsidePopoverClick}\n      >\n        {avatars.map(avatar => (\n          <AvatarItem \n            key={avatar.id}\n            source={avatar.src}\n            label={avatar.label}\n            selected={avatar === currentAvatar}\n            loadingAvatar={avatar === loadingAvatar}\n            listItem\n            onClick={onPickedAvatarClick.bind(null, avatar)}\n          />\n        ))}\n      </AvatarPopover>\n    </Wrapper>\n  )\n}\n\nexport default AvatarPicker\n\n","export const theme = {\n  fontFamily: 'Source Sans Pro, sans-serif',\n  textColor: 'rgb(249, 249, 249)',\n  popover: {\n    bg: 'rgb(44, 48, 51)',\n    shadow: '2px 2px 10px rgb(102, 102, 102)'\n  },\n  border: {\n    initialColor: 'rgb(155, 160, 163)',\n    overlayColor: 'rgb(122, 161, 178)'\n  } \n}\n","import React from 'react'\nimport ErrorBoundary from './ErrorBoundary'\nimport ThemeProvider from './ThemeProvider'\nimport AvatarPicker from './AvatarPicker'\nimport { theme } from '../style/themes'\nimport avatars from '../avatars.json'\n\nconst App = () => (\n  <ErrorBoundary>\n    <ThemeProvider theme={theme}>\n      <AvatarPicker avatars={avatars} />\n    </ThemeProvider>\n  </ErrorBoundary>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}